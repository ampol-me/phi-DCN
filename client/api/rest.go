package api

import (
	"fmt"
	"log"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"

	"phi-DCN/client/config"
)

// StartRESTServer ‡πÄ‡∏£‡∏¥‡πà‡∏° REST API server
func StartRESTServer(port string) {
	app := fiber.New(fiber.Config{
		AppName: "DCN TCP Bridge API",
	})

	// Middleware
	app.Use(recover.New())
	app.Use(logger.New(logger.Config{
		Format: "[${time}] ${status} - ${method} ${path} ${latency}\n",
	}))

	// API endpoints
	api := app.Group("/api")
	api.Get("/config", handleGetConfig)
	api.Post("/config", handleUpdateConfig)
	api.Get("/status", handleStatus)
	api.Get("/test", handleAPITest)
	api.Get("/start", handleStartServer)
	api.Get("/stop", handleStopServer)
	api.Get("/clients", handleClients)
	api.Get("/mics", handleMics)

	// ‡πÄ‡∏£‡∏¥‡πà‡∏° server
	fmt.Printf("üöÄ REST API running on port %s\n", port)
	log.Fatal(app.Listen(":" + port))
}

// handleGetConfig ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
func handleGetConfig(c *fiber.Ctx) error {
	return c.JSON(config.Config)
}

// handleUpdateConfig ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
func handleUpdateConfig(c *fiber.Ctx) error {
	var newConfig config.AppConfig
	if err := c.BodyParser(&newConfig); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "Invalid data",
		})
	}

	// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
	if newConfig.APIHost != "" {
		config.Config.APIHost = newConfig.APIHost
	}
	if newConfig.APIPort != "" {
		config.Config.APIPort = newConfig.APIPort
	}
	if newConfig.APIPath != "" {
		config.Config.APIPath = newConfig.APIPath
	}
	if newConfig.APIKey != "" {
		config.Config.APIKey = newConfig.APIKey
	}
	if newConfig.TCPServerPort != "" {
		config.Config.TCPServerPort = newConfig.TCPServerPort
	}

	return c.JSON(fiber.Map{
		"status":  "success",
		"message": "Configuration updated successfully",
	})
}

// handleStatus ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
func handleStatus(c *fiber.Ctx) error {
	status := fiber.Map{
		"apiStatus":    config.Config.APIStatus,
		"serverStatus": config.Config.TCPServerStatus,
	}

	return c.JSON(status)
}

// handleAPITest ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö API
func handleAPITest(c *fiber.Ctx) error {
	err := TestConnection()
	if err != nil {
		return c.JSON(fiber.Map{
			"status":  "error",
			"message": err.Error(),
		})
	}

	return c.JSON(fiber.Map{
		"status":  "success",
		"message": "Connected to API successfully",
	})
}

// handleStartServer ‡πÄ‡∏£‡∏¥‡πà‡∏° TCP Server
func handleStartServer(c *fiber.Ctx) error {
	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ TCP Server ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if config.IsServerRunning() {
		return c.JSON(fiber.Map{
			"status":  "error",
			"message": "TCP Server is already running",
		})
	}

	// ‡πÄ‡∏£‡∏¥‡πà‡∏° TCP Server ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
	go func() {
		config.StartTCPServer()
	}()

	return c.JSON(fiber.Map{
		"status":  "success",
		"message": "Starting TCP Server",
	})
}

// handleStopServer ‡∏´‡∏¢‡∏∏‡∏î TCP Server
func handleStopServer(c *fiber.Ctx) error {
	config.StopTCPServer()

	return c.JSON(fiber.Map{
		"status":  "success",
		"message": "TCP Server stopped",
	})
}

// handleClients ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ clients ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà
func handleClients(c *fiber.Ctx) error {
	clients := config.Config.GetActiveClients()

	return c.JSON(fiber.Map{
		"count":   len(clients),
		"clients": clients,
	})
}

// handleMics ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
func handleMics(c *fiber.Ctx) error {
	mics := config.Config.GetActiveMics()

	return c.JSON(fiber.Map{
		"count": len(mics),
		"mics":  mics,
	})
}
