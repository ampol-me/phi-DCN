package server

import (
	"encoding/binary"
	"fmt"
	"net"
	"os"
	"reflect"
	"sync"
	"time"

	"phi-DCN/client/api"
	"phi-DCN/client/xml"
)

// Client ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á client ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
type Client struct {
	conn net.Conn
	id   int
}

// Server ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏á clients
type Server struct {
	clients    map[int]*Client
	nextID     int
	clientLock sync.Mutex
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Server ‡πÉ‡∏´‡∏°‡πà
func NewServer() *Server {
	return &Server{
		clients: make(map[int]*Client),
		nextID:  1,
	}
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° client ‡πÉ‡∏´‡∏°‡πà
func (s *Server) AddClient(conn net.Conn) *Client {
	s.clientLock.Lock()
	defer s.clientLock.Unlock()

	client := &Client{
		conn: conn,
		id:   s.nextID,
	}
	s.clients[s.nextID] = client
	s.nextID++

	fmt.Printf("üë• Client %d connected: %s\n", client.id, conn.RemoteAddr())
	return client
}

// ‡∏•‡∏ö client
func (s *Server) RemoveClient(id int) {
	s.clientLock.Lock()
	defer s.clientLock.Unlock()

	if client, exists := s.clients[id]; exists {
		fmt.Printf("üëã Client %d disconnected: %s\n", id, client.conn.RemoteAddr())
		client.conn.Close()
		delete(s.clients, id)
	}
}

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏∏‡∏Å clients
func (s *Server) Broadcast(data []byte) {
	s.clientLock.Lock()
	defer s.clientLock.Unlock()

	disconnectedClients := []int{}

	for id, client := range s.clients {
		_, err := client.conn.Write(data)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è Cannot send data to Client %d: %v\n", id, err)
			disconnectedClients = append(disconnectedClients, id)
		}
	}

	// ‡∏•‡∏ö clients ‡∏ó‡∏µ‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
	for _, id := range disconnectedClients {
		go s.RemoveClient(id)
	}
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á clients
func (s *Server) ProcessAndBroadcast() {
	var lastSpeakers []api.Speaker
	speakerStates := make(map[int]bool)

	for {
		speakers, err := api.GetSpeakers()
		if err != nil {
			fmt.Println("‚ö†Ô∏è Cannot fetch speakers data:", err)
			// ‡∏™‡πà‡∏á XML ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
			emptyXML := xml.ToUTF16LEString(fmt.Sprintf(`<?xml version="1.0" encoding="utf-8"?><DiscussionActivity xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" Version="1" TimeStamp="%s" Topic="Discussion" Type="ActiveListUpdated"><Discussion Id="80"><ActiveList><Participants></Participants></ActiveList></Discussion></DiscussionActivity>`,
				time.Now().Format("2006-01-02T15:04:05.0000000-07:00")))

			header := make([]byte, 8)
			binary.LittleEndian.PutUint32(header[0:4], 3)
			binary.LittleEndian.PutUint32(header[4:8], uint32(len(emptyXML)))
			s.Broadcast(append(header, emptyXML...))
			time.Sleep(time.Second)
			continue
		}

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
		currentSpeakerIDs := make(map[int]bool)
		for _, speaker := range speakers {
			currentSpeakerIDs[speaker.ID] = true

			// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡∏Ñ‡πå
			lastState, exists := speakerStates[speaker.ID]
			if !exists || lastState != speaker.MicOn {
				// ‡∏™‡πà‡∏á SeatActivity ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
				seatXML := xml.GenerateSeatXML(speaker, speaker.MicOn)
				header := make([]byte, 8)
				binary.LittleEndian.PutUint32(header[0:4], 5)
				binary.LittleEndian.PutUint32(header[4:8], uint32(len(seatXML)))
				s.Broadcast(append(header, seatXML...))
				speakerStates[speaker.ID] = speaker.MicOn
			}
		}

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
		for id, state := range speakerStates {
			if !currentSpeakerIDs[id] && state {
				// ‡∏™‡∏£‡πâ‡∏≤‡∏á speaker ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏ï‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå
				for _, oldSpeaker := range lastSpeakers {
					if oldSpeaker.ID == id {
						seatXML := xml.GenerateSeatXML(oldSpeaker, false)
						header := make([]byte, 8)
						binary.LittleEndian.PutUint32(header[0:4], 5)
						binary.LittleEndian.PutUint32(header[4:8], uint32(len(seatXML)))
						s.Broadcast(append(header, seatXML...))
						speakerStates[id] = false
						break
					}
				}
			}
		}

		// ‡∏™‡πà‡∏á DiscussionActivity ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
		if !reflect.DeepEqual(speakers, lastSpeakers) {
			discussionXML := xml.GenerateDiscussionXML(speakers)
			header := make([]byte, 8)
			binary.LittleEndian.PutUint32(header[0:4], 3)
			binary.LittleEndian.PutUint32(header[4:8], uint32(len(discussionXML)))
			s.Broadcast(append(header, discussionXML...))
			lastSpeakers = speakers
		}

		time.Sleep(time.Second)
	}
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å client
func HandleClientConnection(server *Server, conn net.Conn) {
	client := server.AddClient(conn)
	defer server.RemoveClient(client.id)

	// ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ client ‡∏à‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
	buffer := make([]byte, 1024)
	for {
		_, err := conn.Read(buffer)
		if err != nil {
			return
		}
	}
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô Server
func StartServer(port string) {
	// ‡∏™‡∏£‡πâ‡∏≤‡∏á server
	server := NewServer()

	// ‡πÄ‡∏£‡∏¥‡πà‡∏° server
	listener, err := net.Listen("tcp", ":"+port)
	if err != nil {
		fmt.Printf("‚ùå Cannot start server: %v\n", err)
		os.Exit(1)
	}
	defer listener.Close()

	fmt.Printf("üöÄ Server running on port %s\n", port)

	// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	go server.ProcessAndBroadcast()

	// ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å clients
	for {
		conn, err := listener.Accept()
		if err != nil {
			fmt.Printf("‚ö†Ô∏è Cannot accept client connection: %v\n", err)
			continue
		}
		go HandleClientConnection(server, conn)
	}
}
