package main

import (
	"bytes"
	"encoding/binary"
	"encoding/xml"
	"fmt"
	"net"
	"os"
	"strings"
	"time"
	"unicode/utf16"
)

const (
	SERVER_HOST     = "172.20.1.229" // IP address ‡∏Ç‡∏≠‡∏á Bosch DCN server
	SERVER_PORT     = "20000"        // ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏Ç‡∏≠‡∏á server
	CONNECT_TIMEOUT = 5              // timeout ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
	READ_TIMEOUT    = 10             // timeout ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
)

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ header ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
func decodeHeader(encodedHeader string) (topic uint32, messageLength uint32, err error) {
	// ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÄ‡∏õ‡πá‡∏ô []byte
	headerBytes := []byte(encodedHeader)

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á header
	if len(headerBytes) < 8 {
		return 0, 0, fmt.Errorf("header ‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ: ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 8 bytes ‡πÅ‡∏ï‡πà‡πÑ‡∏î‡πâ %d bytes", len(headerBytes))
	}

	// ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ topic ‡πÅ‡∏•‡∏∞ messageLength
	topic = binary.LittleEndian.Uint32(headerBytes[0:4])
	messageLength = binary.LittleEndian.Uint32(headerBytes[4:8])

	return topic, messageLength, nil
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö XML ‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
func prettyXML(xmlStr string) []string {
	// ‡πÅ‡∏¢‡∏Å XML strings ‡∏î‡πâ‡∏ß‡∏¢ <?xml
	xmlParts := bytes.Split([]byte(xmlStr), []byte("<?xml"))

	var results []string

	for _, part := range xmlParts {
		// ‡∏Ç‡πâ‡∏≤‡∏° empty parts
		if len(bytes.TrimSpace(part)) == 0 {
			continue
		}

		// ‡πÄ‡∏ï‡∏¥‡∏° <?xml ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
		if !bytes.HasPrefix(part, []byte("<?xml")) {
			part = append([]byte("<?xml"), part...)
		}

		// ‡∏™‡∏£‡πâ‡∏≤‡∏á decoder ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô XML
		decoder := xml.NewDecoder(bytes.NewReader(part))

		// ‡∏™‡∏£‡πâ‡∏≤‡∏á buffer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
		var prettyXML bytes.Buffer

		// ‡∏™‡∏£‡πâ‡∏≤‡∏á encoder ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡πÉ‡∏ô buffer ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î indent
		encoder := xml.NewEncoder(&prettyXML)
		encoder.Indent("", "  ")

		// ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô XML token ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
		for {
			token, err := decoder.Token()
			if err != nil {
				break
			}
			if token == nil {
				break
			}

			err = encoder.EncodeToken(token)
			if err != nil {
				break
			}
		}

		// Flush encoder
		encoder.Flush()

		// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô array
		if prettyXML.Len() > 0 {
			results = append(results, prettyXML.String())
		}
	}

	return results
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
func readFull(conn net.Conn, buffer []byte) error {
	bytesRead := 0
	for bytesRead < len(buffer) {
		n, err := conn.Read(buffer[bytesRead:])
		if err != nil {
			return err
		}
		bytesRead += n
	}
	return nil
}

// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• XML
type SeatActivity struct {
	XMLName xml.Name `xml:"SeatActivity"`
	Seat    struct {
		ID       string `xml:"Id,attr"`
		SeatData struct {
			Name             string `xml:"Name,attr"`
			MicrophoneActive bool   `xml:"MicrophoneActive,attr"`
		} `xml:"SeatData"`
	} `xml:"Seat"`
}

type DiscussionActivity struct {
	XMLName    xml.Name `xml:"DiscussionActivity"`
	Discussion struct {
		ActiveList struct {
			Participants struct {
				ParticipantContainers []struct {
					Seat struct {
						SeatData struct {
							Name             string `xml:"Name,attr"`
							MicrophoneActive bool   `xml:"MicrophoneActive,attr"`
						} `xml:"SeatData"`
					} `xml:"Seat"`
				} `xml:"ParticipantContainer"`
			} `xml:"Participants"`
		} `xml:"ActiveList"`
	} `xml:"Discussion"`
}

// ‡πÅ‡∏õ‡∏•‡∏á XML ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
func parseXMLStatus(xmlStr string, topic uint32) string {
	switch topic {
	case 3: // Discussion Activity
		var discussion DiscussionActivity
		if err := xml.Unmarshal([]byte(xmlStr), &discussion); err == nil {
			var status strings.Builder
			status.WriteString("\nüéôÔ∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡∏Ñ‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:")
			for _, participant := range discussion.Discussion.ActiveList.Participants.ParticipantContainers {
				micStatus := "üî¥ ‡∏õ‡∏¥‡∏î"
				if participant.Seat.SeatData.MicrophoneActive {
					micStatus = "üü¢ ‡πÄ‡∏õ‡∏¥‡∏î"
				}
				status.WriteString(fmt.Sprintf("\n   %s: %s", participant.Seat.SeatData.Name, micStatus))
			}
			return status.String()
		}
	case 5: // Seat Activity
		var seat SeatActivity
		if err := xml.Unmarshal([]byte(xmlStr), &seat); err == nil {
			micStatus := "üî¥ ‡∏õ‡∏¥‡∏î"
			if seat.Seat.SeatData.MicrophoneActive {
				micStatus = "üü¢ ‡πÄ‡∏õ‡∏¥‡∏î"
			}
			return fmt.Sprintf("\nüéôÔ∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: %s %s", seat.Seat.SeatData.Name, micStatus)
		}
	}
	return ""
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á header
func createHeader(topic uint32, length uint32) []byte {
	header := make([]byte, 8)
	binary.LittleEndian.PutUint32(header[0:4], topic)
	binary.LittleEndian.PutUint32(header[4:8], length)
	return header
}

// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• header ‡πÅ‡∏•‡∏∞ message
type MessageData struct {
	topic   uint32
	length  uint32
	message []byte
}

func utf16LEToString(b []byte) string {
	// ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å bytes ‡πÄ‡∏õ‡πá‡∏ô uint16 (UTF-16LE)
	utf16Words := make([]uint16, len(b)/2)
	for i := 0; i < len(b)/2; i++ {
		utf16Words[i] = uint16(b[i*2]) | uint16(b[i*2+1])<<8
	}
	// ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å UTF-16 ‡πÄ‡∏õ‡πá‡∏ô string
	return string(utf16.Decode(utf16Words))
}

func handleConnection(conn net.Conn) {
	defer conn.Close()

	fmt.Printf("üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö %s:%s ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n", SERVER_HOST, SERVER_PORT)
	fmt.Println("üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á buffer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
	remainingData := make([]byte, 0)

	for {
		// ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏≠‡∏£‡πå
		buffer := make([]byte, 4096)
		n, err := conn.Read(buffer)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î: %v\n", err)
			return
		}

		// ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
		data := append(remainingData, buffer[:n]...)

		// ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏û‡∏≠
		for len(data) >= 8 { // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 bytes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö header
			// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö 16 bytes ‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏µ‡∏ö‡∏±‡∏Å
			debugLen := 16
			if len(data) < debugLen {
				debugLen = len(data)
			}
			fmt.Printf("üìù Raw data: [% x]\n", data[:debugLen])

			// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô header ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
			if data[0] == 0x05 || data[0] == 0x03 { // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô topic 5 ‡∏´‡∏£‡∏∑‡∏≠ 3
				// ‡∏≠‡πà‡∏≤‡∏ô header
				topic := uint32(data[0])
				length := binary.LittleEndian.Uint32(data[4:8])

				fmt.Printf("üì® ‡∏û‡∏ö Header - Topic: %d, Length: %d bytes\n", topic, length)

				// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• XML ‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
				if len(data) < 8+int(length) {
					// ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏£‡∏≠‡∏£‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤
					remainingData = data
					break
				}

				// ‡∏≠‡πà‡∏≤‡∏ô XML message
				xmlMessage := data[8 : 8+length]

				// ‡πÅ‡∏õ‡∏•‡∏á UTF-16LE ‡πÄ‡∏õ‡πá‡∏ô UTF-8 ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
				xmlStr := string(xmlMessage)
				if length > 2 && xmlMessage[0] == 0xFF && xmlMessage[1] == 0xFE {
					// ‡∏Ç‡πâ‡∏≤‡∏° BOM (2 bytes) ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô UTF-8
					xmlStr = utf16LEToString(xmlMessage[2:])
				}

				// ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• XML
				topicName := "Unknown"
				switch topic {
				case 3:
					topicName = "Discussion Activity"
				case 5:
					topicName = "Seat Activity"
				}

				// ‡πÅ‡∏¢‡∏Å‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö XML
				formattedXMLs := prettyXML(xmlStr)
				for _, xml := range formattedXMLs {
					status := parseXMLStatus(xml, topic)
					if status != "" {
						fmt.Println(status)
					}
					fmt.Printf("\nüìú Topic: %d (%s)\n%s\n", topic, topicName, xml)
				}

				fmt.Println(strings.Repeat("-", 80))

				// ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
				data = data[8+length:]
			} else {
				// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà header ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ 1 byte
				data = data[1:]
			}
		}

		// ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏ß‡πâ
		remainingData = data
	}
}

func main() {
	// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á server
	serverAddr := fmt.Sprintf("%s:%s", SERVER_HOST, SERVER_PORT)
	fmt.Printf("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á %s...\n", serverAddr)

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á dialer ‡∏û‡∏£‡πâ‡∏≠‡∏° timeout
	dialer := net.Dialer{
		Timeout: time.Duration(CONNECT_TIMEOUT) * time.Second,
	}

	conn, err := dialer.Dial("tcp", serverAddr)
	if err != nil {
		fmt.Printf("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö server ‡πÑ‡∏î‡πâ: %v\n", err)
		os.Exit(1)
	}
	defer conn.Close()

	handleConnection(conn)
}
